// 
// Generated by @himenon/openapi-typescript-code-generator v0.26.1
// 
// OpenApi : 3.0.0
// 
// 
export class Client {
    apiClient;
    baseUrl;
    constructor(apiClient, baseUrl) {
        this.apiClient = apiClient;
        this.baseUrl = baseUrl.replace(/\/$/, "");
    }
    /** Creates a model response for the given chat conversation. */
    async createChatCompletion(params, option) {
        const url = this.baseUrl + `/chat/completions`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "POST",
            url,
            headers,
            requestBody: params.requestBody
        }, option);
    }
    /** Creates a completion for the provided prompt and parameters. */
    async createCompletion(params, option) {
        const url = this.baseUrl + `/completions`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "POST",
            url,
            headers,
            requestBody: params.requestBody
        }, option);
    }
    /** Creates a new edit for the provided input, instruction, and parameters. */
    async createEdit(params, option) {
        const url = this.baseUrl + `/edits`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "POST",
            url,
            headers,
            requestBody: params.requestBody
        }, option);
    }
    /** Creates an image given a prompt. */
    async createImage(params, option) {
        const url = this.baseUrl + `/images/generations`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "POST",
            url,
            headers,
            requestBody: params.requestBody
        }, option);
    }
    /** Creates an edited or extended image given an original image and a prompt. */
    async createImageEdit(params, option) {
        const url = this.baseUrl + `/images/edits`;
        const headers = {
            "Content-Type": "multipart/form-data",
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "POST",
            url,
            headers,
            requestBody: params.requestBody
        }, option);
    }
    /** Creates a variation of a given image. */
    async createImageVariation(params, option) {
        const url = this.baseUrl + `/images/variations`;
        const headers = {
            "Content-Type": "multipart/form-data",
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "POST",
            url,
            headers,
            requestBody: params.requestBody
        }, option);
    }
    /** Creates an embedding vector representing the input text. */
    async createEmbedding(params, option) {
        const url = this.baseUrl + `/embeddings`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "POST",
            url,
            headers,
            requestBody: params.requestBody
        }, option);
    }
    /** Transcribes audio into the input language. */
    async createTranscription(params, option) {
        const url = this.baseUrl + `/audio/transcriptions`;
        const headers = {
            "Content-Type": "multipart/form-data",
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "POST",
            url,
            headers,
            requestBody: params.requestBody
        }, option);
    }
    /** Translates audio into English. */
    async createTranslation(params, option) {
        const url = this.baseUrl + `/audio/translations`;
        const headers = {
            "Content-Type": "multipart/form-data",
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "POST",
            url,
            headers,
            requestBody: params.requestBody
        }, option);
    }
    /** Returns a list of files that belong to the user's organization. */
    async listFiles(option) {
        const url = this.baseUrl + `/files`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "GET",
            url,
            headers
        }, option);
    }
    /** Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. */
    async createFile(params, option) {
        const url = this.baseUrl + `/files`;
        const headers = {
            "Content-Type": "multipart/form-data",
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "POST",
            url,
            headers,
            requestBody: params.requestBody
        }, option);
    }
    /** Returns information about a specific file. */
    async retrieveFile(params, option) {
        const url = this.baseUrl + `/files/${params.parameter.file_id}`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "GET",
            url,
            headers
        }, option);
    }
    /** Delete a file. */
    async deleteFile(params, option) {
        const url = this.baseUrl + `/files/${params.parameter.file_id}`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "DELETE",
            url,
            headers
        }, option);
    }
    /** Returns the contents of the specified file */
    async downloadFile(params, option) {
        const url = this.baseUrl + `/files/${params.parameter.file_id}/content`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "GET",
            url,
            headers
        }, option);
    }
    /** List your organization's fine-tuning jobs */
    async listFineTunes(option) {
        const url = this.baseUrl + `/fine-tunes`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "GET",
            url,
            headers
        }, option);
    }
    /**
     * Creates a job that fine-tunes a specified model from a given dataset.
     *
     * Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
     *
     * [Learn more about Fine-tuning](/docs/guides/fine-tuning)
     */
    async createFineTune(params, option) {
        const url = this.baseUrl + `/fine-tunes`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "POST",
            url,
            headers,
            requestBody: params.requestBody
        }, option);
    }
    /**
     * Gets info about the fine-tune job.
     *
     * [Learn more about Fine-tuning](/docs/guides/fine-tuning)
     */
    async retrieveFineTune(params, option) {
        const url = this.baseUrl + `/fine-tunes/${params.parameter.fine_tune_id}`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "GET",
            url,
            headers
        }, option);
    }
    /** Immediately cancel a fine-tune job. */
    async cancelFineTune(params, option) {
        const url = this.baseUrl + `/fine-tunes/${params.parameter.fine_tune_id}/cancel`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "POST",
            url,
            headers
        }, option);
    }
    /** Get fine-grained status updates for a fine-tune job. */
    async listFineTuneEvents(params, option) {
        const url = this.baseUrl + `/fine-tunes/${params.parameter.fine_tune_id}/events`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters = {
            stream: { value: params.parameter.stream, explode: false }
        };
        return this.apiClient.request({
            httpMethod: "GET",
            url,
            headers,
            queryParameters: queryParameters
        }, option);
    }
    /** Lists the currently available models, and provides basic information about each one such as the owner and availability. */
    async listModels(option) {
        const url = this.baseUrl + `/models`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "GET",
            url,
            headers
        }, option);
    }
    /** Retrieves a model instance, providing basic information about the model such as the owner and permissioning. */
    async retrieveModel(params, option) {
        const url = this.baseUrl + `/models/${params.parameter.model}`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "GET",
            url,
            headers
        }, option);
    }
    /** Delete a fine-tuned model. You must have the Owner role in your organization. */
    async deleteModel(params, option) {
        const url = this.baseUrl + `/models/${params.parameter.model}`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "DELETE",
            url,
            headers
        }, option);
    }
    /** Classifies if text violates OpenAI's Content Policy */
    async createModeration(params, option) {
        const url = this.baseUrl + `/moderations`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "POST",
            url,
            headers,
            requestBody: params.requestBody
        }, option);
    }
}
export class BlobWithFilename extends Blob {
    filename;
    constructor(blobPart, type, filename) {
        super(blobPart, { type });
        this.filename = filename;
    }
}
